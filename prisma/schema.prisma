// Prisma Schema for Patience Fero & Her Promise Fulfilled
// Database: MySQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id                String          @id @default(cuid())
  email             String          @unique
  username          String?         @unique
  name              String?
  password          String
  role              Role            @default(USER)
  image             String?
  dashboard         DashboardAccess @default(NONE)
  active            Boolean         @default(true)
  emailVerified     Boolean         @default(false)
  verificationToken String?         @unique
  resetToken        String?         @unique
  resetTokenExpiry  DateTime?
  lastLogin         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  posts             Post[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

enum Role {
  USER
  EDITOR
  ADMIN
  SUPER_ADMIN
}

enum DashboardAccess {
  NONE
  PORTFOLIO
  HERPROMISE
  BOTH
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Blog Post model
model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  excerpt     String?   @db.Text
  coverImage  String?
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String    @map("author_id")
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String?   @map("category_id")
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
  @@index([published])
  @@map("posts")
}

// Blog Category model
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("categories")
}

// Blog Tag model
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@map("tags")
}

// Program model for Her Promise Fulfilled
model Program {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String   @db.Text
  image         String?
  gallery       String?  @db.Text // JSON array of images
  category      String
  impact        String?  @db.Text
  beneficiaries Int?     @default(0)
  startDate     String?
  endDate       String?
  location      String?
  active        Boolean  @default(true)
  featured      Boolean  @default(false)
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([slug])
  @@index([category])
  @@index([active])
  @@index([order])
  @@map("programs")
}

// Testimonial model
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String?
  content   String   @db.Text
  image     String?
  featured  Boolean  @default(false)
  rating    Int?     @default(5)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([featured])
  @@map("testimonials")
}

// Contact form submissions
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([read])
  @@index([createdAt])
  @@map("contacts")
}

// Impact Metrics for dashboard
model ImpactMetric {
  id          String   @id @default(cuid())
  label       String
  value       String // Changed to String to support "1000+" formats
  description String?  @db.Text
  icon        String?
  category    String?
  year        String?
  order       Int      @default(0)
  active      Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
  @@index([active])
  @@index([featured])
  @@map("impact_metrics")
}

// Donation model
model Donation {
  id        String         @id @default(cuid())
  name      String
  email     String
  amount    Float
  currency  String         @default("USD")
  message   String?        @db.Text
  anonymous Boolean        @default(false)
  status    DonationStatus @default(PENDING)
  paymentId String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("donations")
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Donation Campaigns
model DonationCampaign {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String    @db.Text
  goal        Float
  raised      Float     @default(0)
  currency    String    @default("USD")
  image       String?
  startDate   DateTime
  endDate     DateTime?
  active      Boolean   @default(true)
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([slug])
  @@index([active])
  @@index([featured])
  @@map("donation_campaigns")
}

// Newsletter subscribers
model Newsletter {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  active         Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  @@index([email])
  @@index([active])
  @@map("newsletters")
}

// Volunteer applications
model Volunteer {
  id        String          @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String          @db.Text
  skills    String?         @db.Text
  resumeUrl String?         @map("resume_url")
  status    VolunteerStatus @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([email])
  @@index([status])
  @@map("volunteers")
}

enum VolunteerStatus {
  PENDING
  APPROVED
  REJECTED
  CONTACTED
}

// ============================================
// PATIENCE PORTFOLIO MODELS
// ============================================

// Education model
model Education {
  id          String   @id @default(cuid())
  degree      String
  institution String
  location    String
  startDate   String // Format: "YYYY" or "YYYY-MM"
  endDate     String? // Format: "YYYY" or "YYYY-MM" or "Present"
  description String?  @db.Text
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order])
  @@map("education")
}

// Awards & Certifications model
model Award {
  id           String    @id @default(cuid())
  title        String
  organization String
  date         String // Format: "YYYY-MM" or "YYYY"
  description  String    @db.Text
  category     AwardType
  imageUrl     String? // Certificate/Award image (optional)
  order        Int       @default(0)
  featured     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([category])
  @@index([featured])
  @@index([order])
  @@map("awards")
}

enum AwardType {
  ACADEMIC
  PUBLIC_SPEAKING
  TECHNICAL
  SPORTS
  LEADERSHIP
  CERTIFICATION
}

// Professional Experience model
model Experience {
  id           String   @id @default(cuid())
  role         String
  organization String
  location     String?
  startDate    String // Format: "YYYY-MM"
  endDate      String? // Format: "YYYY-MM" or "Present"
  description  String   @db.Text
  highlights   String?  @db.Text // JSON array of key achievements
  type         ExpType
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([type])
  @@index([order])
  @@map("experiences")
}

enum ExpType {
  LEADERSHIP
  PROFESSIONAL
  VOLUNTEER
  ENTREPRENEURSHIP
}

// Skills model
model Skill {
  id        String      @id @default(cuid())
  name      String
  category  SkillType
  level     SkillLevel?
  order     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([category])
  @@index([order])
  @@map("skills")
}

enum SkillType {
  RESEARCH
  ECONOMICS
  TECHNICAL
  COMMUNICATION
  LEADERSHIP
  LANGUAGES
}

enum SkillLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  FLUENT
  NATIVE
}

// Languages model
model Language {
  id        String     @id @default(cuid())
  name      String     @unique
  level     SkillLevel
  order     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([order])
  @@map("languages")
}

// Research & Projects model
model Research {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  status      String? // "In Progress", "Completed", "Published"
  date        String? // Format: "YYYY" or "YYYY-MM"
  link        String? // Link to publication/project
  imageUrl    String? // Optional project image
  order       Int      @default(0)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([featured])
  @@index([order])
  @@map("research")
}

// Personal Information (single record)
model PersonalInfo {
  id           String   @id @default(cuid())
  fullName     String
  email        String
  phone        String
  location     String
  linkedIn     String?
  weChat       String?
  dateOfBirth  String?
  nationality  String?
  placeOfBirth String?
  bio          String   @db.Text
  profileImage String? // Optional profile photo
  resumeUrl    String? // Link to downloadable resume
  updatedAt    DateTime @updatedAt

  @@map("personal_info")
}
